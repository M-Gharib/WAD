* {
    font-family: sans-serif;
    box-sizing: border-box;
    /* 
The box-sizing CSS property sets how the total width and height of an element is calculated. 
If you set box-sizing: border-box; on an element, padding and border are included in the width and height:
*/
}

body {
    line-height: 1.6;
    margin: 0;
}

h1 {
    color: white;
    text-align: center;
}

p {
    font-family: verdana;
    background-color: rgb(230, 178, 173)
}

ul {
    margin: 0;
    padding: 0;
    list-style: none;
    /* list-style: none = No marker is shown */
}

a {
    color: #34495e;
    text-decoration: none;
    /* 
text-decoration: none - is used here to not show the underlining under an anchor element when a mouse hovers over it
Comment it out and check the result on the page.
*/
}

.logo {
    margin: 0;
    font-size: 1.1em;
}

section {
    padding: 10px 15px;
    margin: 10px;
    display: block;
    /* display: block - displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width */
}

.header {
    padding-top: .5em;
    padding-bottom: .5em;
    border: 1px solid #646174;
    background-color: #a2ccea;
    /*    -webkit-box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);
    
-webkit-box-shadow is used to apply a box-shadow, and it is a browser-specific 
implementation for WebKit browsers like Google Chrome and Safari.  
-moz-box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);
-moz = mozilla firefox 

Note concerning Vendor Prefixes (-webkit, -moz), why do they exist?  
  1- A new CSS feature appears
  2- Browsers test the feature 
  3- Browsers add a prefix to it to allow developers to use it
  4- The feature is fully supported, there is no need for the prefix anymore.
 */
    box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);
    border-radius: 5px;
    /*    -webkit-border-radius: 5px;
      -moz-border-radius: 5px;
Like the previous three styles for shadow, these three styles for radius are added to guarantee that the required style will work with most used browsers
*/
}

.nav {
    margin-top: 5px;
}

.nav a {
    padding: 10px 15px;
    text-transform: uppercase;
    text-align: center;
    color: #34495e;
    font-size: .99em;
    display: block;
}

.static {
    position: static;
    background-color: #ad2121;
    border: 3px solid #ad2121;
}

.relative {
    position: relative;
    left: 30px;
    top: 30px;
    z-index: 1;
    background-color: #5721ad;
    border: 3px solid #5721ad;
}

.fixed {
    position: fixed;
    bottom: 0;
    right: 0;
    width: 300px;
    background-color: #ad2188;
    border: 3px solid #ad2188;
}

.parentpositioning {
    background-color: #6921ad;
    width: 550;
    height: 400;
    position: relative;
}

.absolute {
    position: absolute;
    top: 40px;
    left: 0;
    width: 500px;
    z-index: 1;
    background-color: #ada121;
    border: 3px solid #ada121;
}

.sticky {
    position: sticky;
    top: 0;
    background-color: green;
    border: 2px solid #4CAF50;
}


/* Descendant combinator */

div strong {
    color: rgb(154, 58, 51);
}


/* Pseudo-class selector */

.nav a:hover {
    background-color: #7ebeb6;
    color: #092747;
}

p:hover {
    text-shadow: 1px 1px;
}


/* The ::first-letter Pseudo-element selector*/

p::first-letter {
    color: #ff0000;
    font-size: xx-large;
}


/* General sibling combinator (~)*/

td~td {
    background-color: #d6d3d3;
}


/* child combinator (>)*/

tr>td {
    background-color: #d6d3d3;
}

thead>tr {
    background-color: #a7a5a5;
}


/* flexBox */


/* flex container Parent 

The flex container properties are:
flex-direction
flex-wrap
flex-flow
justify-content
align-items
align-content
*/


/* Example of a Flex container with a class container

.container {
    background-color: #eee;
    width: 600px;
    padding: 20px;
    margin: 20px auto;
    display: flex;


    flex-direction: row;
    
        flex-direction: row | row-reverse | column | column-reverse; 
         row (default): left to right in ltr; right to left in rtl
         row-reverse: right to left in ltr; left to right in rtl
         column: same as row but top to bottom
         column-reverse: same as row-reverse but bottom to top
   
    flex-wrap: wrap-reverse;
   
       flex-wrap: nowrap | wrap | wrap-reverse;
        nowrap (default): all flex items will be on one line
        wrap: flex items will wrap onto multiple lines, from top to bottom.
        wrap-reverse: flex items will wrap onto multiple lines from bottom to top.

        Note: to test this property, try to increase the width of the childerns
    
    flex-flow: column wrap;

    flex-flow is a shorthand for the flex-direction and flex-wrap properties, 
    which together define the flex container's main and cross axes. 
    The default value is row nowrap. 
   
    justify-content: flex-end;


        flex-start (default): items are packed toward the start of the flex-direction.
        flex-end: items are packed toward the end of the flex-direction.
        start: items are packed toward the start of the writing-mode direction.
        end: items are packed toward the end of the writing-mode direction.
        left: items are packed toward left edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start.
        right: items are packed toward right edge of the container, unless that doesn’t make sense with the flex-direction, then it behaves like start.
        center: items are centered along the line
        space-between: items are evenly distributed in the line; 
        irst item is on the start line, last item on the end line
        space-around: items are evenly distributed in the line with equal space around them. 
        space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal.
     */


/*  align-items: 
     stretch (default): stretch to fill the container (still respect min-width/max-width)
     flex-start / start / self-start: items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the flex-direction rules or the writing-mode rules.
     flex-end / end / self-end: items are placed at the end of the cross axis. The difference again is subtle and is about respecting flex-direction rules vs. writing-mode rules.
     center: items are centered in the cross-axis
     baseline: items are aligned such as their baselines align 
}*/


/* Flex items - Children   
.container div {
    background-color: rgb(68, 0, 255);
    color: white;
    width: 40%;
    text-align: center;
    padding: 20px;
    width: calc(100% / 3); 
    flex-grow This defines the ability for a flex item to grow if necessary. 
    
    flex-grow: 1;
    flex-shrink: this defines the ability for a flex item to shrink if necessary. 
    
    flex-shrink: 1;
     align-self:  This allows the default alignment (or the one specified by align-items) 
    to be overridden for individual flex items. 
    align-self: auto | flex-start | flex-end | center | baseline | stretch;
    
    align-self: flex-start;
}*/


/* Grid  
.grid {
    margin: 20px auto;
    width: 100%;
    
    background-color: #ddd;
    display: grid;
    grid-template-columns: auto auto;
    
    grid-template-columns: [Number of columns] => [Px, %, Auto, Fraction, Repeat] 
    
    Number of columns in Px = 100px 100px
    Number of columns in % = 30% 30% 30%
    Number of columns in % = Auto X number of columns (e.g., auto auto = 2 auto columns)

    Fraction divide the width in term of fractions among columns
    Example, 1fr 2fr 3fr 4fr 5fr

    Fraction is greedy and Auto is shy - auto will take space based on the content need, and fraction will take all the rest 

    Repeat can be used to mimize written code, if two or more values are the same I can use repeat.
    Example, Repeat(5, auto) =  auto auto auto auto
    Example, Repeat(2, auto) Repeat(3, 20%) = auto auto  20% 20% 20%

   
    grid-template-rows: auto auto auto;
   
    grid-template-rows: [Number of rows In] => [Px, %, Auto, Fraction, Repeat, Mix] 
    same as above
    
    
    gap: 10px 10px;
    row-gap: 10px;
    column-gap: 10px; 
    
    justify-content: space-between;
    Values:
    start – aligns the grid to be flush with the start edge of the grid container
    end – aligns the grid to be flush with the end edge of the grid container
    center – aligns the grid in the center of the grid container
    stretch – resizes the grid items to allow the grid to fill the full width of the grid container
    space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
    space-between – places an even amount of space between each grid item, with no space at the far ends
    space-evenly – places an even amount of space between each grid item, including the far ends 
   
    align-content: space-between;

    Values:

    start – aligns the grid to be flush with the start edge of the grid container
    end – aligns the grid to be flush with the end edge of the grid container
    center – aligns the grid in the center of the grid container
    stretch – resizes the grid items to allow the grid to fill the full height of the grid container
    space-around – places an even amount of space between each grid item, with half-sized spaces on the far ends
    space-between – places an even amount of space between each grid item, with no space at the far ends
    space-evenly – places an even amount of space between each grid item, including the far ends
     
}*/


/*
.grid div {
    background-color: red;
    color: white;
    padding: 20px;
    font-size: 30px;
    font-weight: bold;
    text-align: center;
}
.g-one {
    grid-column: 1 / 3;
    grid-column:[Grid-Column-Start] [Grid-Column-End] 
    
    grid-row: 1/3;
    grid-row: [Grid-Row-Start] [Grid-Row-End] 
    
    grid-area: 2/ 3 / 4 / 5;
    grid-area: [Grid-Row-Start] [Grid-Column-Start] [Grid-Row-End] [Grid-Column-End] 
    Make "g-one" start on row-line 2 and column-line 3, and end on row-line 4 and column line 5
    
    justify-self: end;   
    start – aligns the grid item to be flush with the start edge of the cell
    end – aligns the grid item to be flush with the end edge of the cell
    center – aligns the grid item in the center of the cell
    stretch – fills the whole width of the cell (this is the default) 
    
    align-self: start;

    start – aligns the grid item to be flush with the start edge of the cell
    end – aligns the grid item to be flush with the end edge of the cell
    center – aligns the grid item in the center of the cell
    stretch – fills the whole height of the cell (this is the default) 
    
}*/


/* flex  - media*/


/* Applies when the browser's width is 800px wide or wider: */

@media (min-width: 800px) {
    .header,
    .nav {
        display: flex;
    }
    .header {
        flex-direction: column;
        align-items: center;
    }
}


/* Applies when the browser's width is 1000px wide or wider: */

@media (min-width: 1000px) {
    .header {
        flex-direction: row;
        justify-content: space-between;
    }
}


/* Applies when the browser's width is 799px wide or less: */

@media (max-width: 799px) {
    .logo {
        display: none;
    }
}


/* Grid   */

.grid {
    margin: 20px auto;
    width: 100%;
    border: 1px solid #746161;
    background-color: #ddd;
    display: grid;
    grid-template-columns: auto auto;
    /*     
        grid-template-columns - the grid-template-columns CSS property defines the 
        numbers and  sizing functions of the grid columns.
         */
    gap: 10px 10px;
    /* 
        gap: row-gap and column-gap.
        */
}

.grid p {
    background-color: rgb(177, 164, 164);
    color: white;
    padding: 20px;
    font-weight: bold;
    text-align: center;
}


/* Applies when the browser's width is 500px wide or less: */

@media (max-width: 500px) {
    .grid {
        grid-template-columns: 1fr;
    }
}